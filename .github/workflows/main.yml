on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

name: "Build & Release"

# 🎯 VERSION CONTROL - Change these to bump major/minor versions
env:
  APP_MAJOR_VERSION: 1
  APP_MINOR_VERSION: 0
  # PATCH version is automatically calculated from git history
  # Version will be: MAJOR.MINOR.PATCH (e.g., 1.0.30, 1.0.31, etc.)
  # To release 1.1.x: Change APP_MINOR_VERSION to 1
  # To release 2.0.x: Change APP_MAJOR_VERSION to 2, APP_MINOR_VERSION to 0

jobs:
  # Test job for PRs
  test:
    name: Test & Analyze
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          channel: 'stable'

      - name: Flutter Analyze
        run: flutter analyze

      - name: Run Tests
        run: flutter test

  # Build and release job
  build-and-release:
    name: Build & Release
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          token: ${{ secrets.TOKEN }}

      - name: Calculate Version
        id: version
        run: |
          MAJOR=${{ env.APP_MAJOR_VERSION }}
          MINOR=${{ env.APP_MINOR_VERSION }}
          
          # Get all existing tags for this major.minor combination
          EXISTING_TAGS=$(git tag -l "v$MAJOR.$MINOR.*" | sort -V)
          
          if [ -z "$EXISTING_TAGS" ]; then
            # No existing tags for this major.minor, start with patch 0
            PATCH=0
          else
            # Get the highest patch version
            LATEST_TAG=$(echo "$EXISTING_TAGS" | tail -n 1)
            LATEST_PATCH=$(echo "$LATEST_TAG" | sed "s/v$MAJOR\.$MINOR\.//")
            PATCH=$((LATEST_PATCH + 1))
          fi
          
          VERSION="$MAJOR.$MINOR.$PATCH"
          VERSION_CODE=$((MAJOR * 10000 + MINOR * 100 + PATCH))
          TAG="v$VERSION"
          
          echo "🚀 Calculated Version: $VERSION"
          echo "🔢 Version Code: $VERSION_CODE"
          echo "🏷️ Git Tag: $TAG"
          
          # Export to environment
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "MAJOR=$MAJOR" >> $GITHUB_ENV
          echo "MINOR=$MINOR" >> $GITHUB_ENV
          echo "PATCH=$PATCH" >> $GITHUB_ENV
          
          # Update pubspec.yaml with calculated version
          sed -i "s/version: .*/version: $VERSION+$VERSION_CODE/" pubspec.yaml
          echo "✅ Updated pubspec.yaml to: $VERSION+$VERSION_CODE"

      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          channel: 'stable'
          architecture: x64

      # Keystore setup
      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/upload-keystore.jks

      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.KEY_STORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=../app/upload-keystore.jks" >> android/key.properties

      # Reproducible build settings
      - name: Set reproducible build parameters
        run: |
          echo "SOURCE_DATE_EPOCH=1577836800" >> $GITHUB_ENV
          echo "ZIPFLAGS=-X" >> $GITHUB_ENV

      # Quality checks
      - name: Flutter Analyze
        run: flutter analyze

      - name: Run Tests
        run: flutter test

      # Build Android
      - name: Build Android APK
        run: |
          flutter build apk --release --split-per-abi \
            --build-name=${{ env.VERSION }} \
            --build-number=${{ env.VERSION_CODE }}

          cd build/app/outputs/apk/release
          mv app-armeabi-v7a-release.apk SysAdmin-v${{ env.VERSION }}-armeabi-v7a.apk
          mv app-arm64-v8a-release.apk SysAdmin-v${{ env.VERSION }}-arm64-v8a.apk
          mv app-x86_64-release.apk SysAdmin-v${{ env.VERSION }}-x86_64.apk

      # Build iOS
      - name: Build iOS App
        run: |
          flutter build ios --release --no-codesign \
            --build-name=${{ env.VERSION }} \
            --build-number=${{ env.VERSION_CODE }}
          cd build/ios/iphoneos
          mkdir -p Payload
          cp -r Runner.app Payload/
          zip -r SysAdmin-v${{ env.VERSION }}.ipa Payload

      # Create Release
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            build/app/outputs/apk/release/SysAdmin-v${{ env.VERSION }}-armeabi-v7a.apk
            build/app/outputs/apk/release/SysAdmin-v${{ env.VERSION }}-arm64-v8a.apk
            build/app/outputs/apk/release/SysAdmin-v${{ env.VERSION }}-x86_64.apk
            build/ios/iphoneos/SysAdmin-v${{ env.VERSION }}.ipa
          token: ${{ secrets.TOKEN }}
          tag: ${{ env.TAG }}
          name: SysAdmin ${{ env.TAG }}
          body: |
            ## 🚀 Release ${{ env.TAG }}
            
            ### Full Changelog: [${{ env.TAG }}...v${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PREV_PATCH }}](https://github.com/prathameshkhade/SysAdmin/compare/v${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PREV_PATCH }}...${{ env.TAG }})### Full Changelog: [${{ env.TAG }}...v${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PREV_PATCH }}](https://github.com/prathameshkhade/SysAdmin/compare/v${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PREV_PATCH }}...${{ env.TAG }})
          draft: false
          prerelease: false