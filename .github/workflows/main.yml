on:
  pull_request:
    branches:
      - dev
  push:
    branches:
      - dev

name: "Build & Release"

jobs:
  build-android:
    name: Build & Test Android
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Get latest release version
        id: get_version
        run: |
          # Fetch all tags to make sure we have the complete history
          git fetch --tags --force
          # Get the latest tag across all branches
          LATEST_TAG=$(git tag -l | grep "^v[0-9]" | sort -V | tail -n 1 || echo "v1.0.0")
          echo "Latest tag found: $LATEST_TAG"
          # Extract the version number (remove 'v' prefix)
          LATEST_VERSION=${LATEST_TAG#v}
          # Parse the version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
          # Increment the patch version
          NEW_PATCH=$((PATCH + 1))
          # Set the new version
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          # For Android versionCode, use a number that keeps incrementing
          VERSION_CODE=$((PATCH + 1 + 13))
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV
          echo "TAG=v$NEW_VERSION" >> $GITHUB_ENV
          echo "New version will be: v$NEW_VERSION with code $VERSION_CODE"
          
          # Update pubspec.yaml with new version
          sed -i "s/version: .*/version: $NEW_VERSION+$VERSION_CODE/" pubspec.yaml
          cat pubspec.yaml | grep "version:"

      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          channel: 'stable'
          architecture: x64

      # Decode Keystore file
      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/upload-keystore.jks

      # Create key.properties
      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.KEY_STORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=../app/upload-keystore.jks" >> android/key.properties

      # Set environment variables for reproducible builds
      - name: Set reproducible build parameters
        run: |
          # Set SOURCE_DATE_EPOCH to a fixed timestamp for reproducible builds
          echo "SOURCE_DATE_EPOCH=1577836800" >> $GITHUB_ENV
          # Tell ZIP to ignore timestamps
          echo "ZIPFLAGS=-X" >> $GITHUB_ENV

      # Run Flutter analyze to check for issues
      - name: Flutter Analyze
        run: flutter analyze

      # Run tests before building
      - name: Run Tests
        run: flutter test

      # Build APK for Android with reproducible parameters
      - name: Build APK
        run: |
          # Using --build-name with the version from our calculation
          # Also specify build-number to set the versionCode
          flutter build apk --release --split-per-abi --build-name=${{ env.VERSION }} --build-number=${{ env.VERSION_CODE }}

          # Rename APKs with proper versioning
          cd build/app/outputs/apk/release
          mv app-armeabi-v7a-release.apk SysAdmin-v${{ env.VERSION }}-armeabi-v7a.apk
          mv app-arm64-v8a-release.apk SysAdmin-v${{ env.VERSION }}-arm64-v8a.apk
          mv app-x86_64-release.apk SysAdmin-v${{ env.VERSION }}-x86_64.apk

      - name: Upload Android Builds
        uses: actions/upload-artifact@v4
        with:
          name: android-builds
          path: |
            build/app/outputs/apk/release/SysAdmin-v${{ env.VERSION }}-armeabi-v7a.apk
            build/app/outputs/apk/release/SysAdmin-v${{ env.VERSION }}-arm64-v8a.apk
            build/app/outputs/apk/release/SysAdmin-v${{ env.VERSION }}-x86_64.apk

  build-ios:
    name: Build & Test iOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Get latest release version
        id: get_version
        run: |
          # Fetch all tags to make sure we have the complete history
          git fetch --tags --force
          # Get the latest tag across all branches
          LATEST_TAG=$(git tag -l | grep "^v[0-9]" | sort -V | tail -n 1 || echo "v1.0.0")
          echo "Latest tag found: $LATEST_TAG"
          # Extract the version number (remove 'v' prefix)
          LATEST_VERSION=${LATEST_TAG#v}
          # Parse the version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
          # Increment the patch version
          NEW_PATCH=$((PATCH + 1))
          # Set the new version
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          # For version code, use a number that keeps incrementing
          VERSION_CODE=$((PATCH + 1 + 13))
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV
          echo "TAG=v$NEW_VERSION" >> $GITHUB_ENV
          echo "New version will be: v$NEW_VERSION with code $VERSION_CODE"
          
          # Update pubspec.yaml with new version
          sed -i '' "s/version: .*/version: $NEW_VERSION+$VERSION_CODE/" pubspec.yaml
          cat pubspec.yaml | grep "version:"

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          channel: 'stable'

      - name: Build iOS App
        run: |
          # Using --build-name with the version from our calculation
          # Also specify build-number to set CFBundleVersion
          flutter build ios --release --no-codesign --build-name=${{ env.VERSION }} --build-number=${{ env.VERSION_CODE }}
          cd build/ios/iphoneos
          mkdir -p Payload
          cp -r Runner.app Payload/
          zip -r SysAdmin-v${{ env.VERSION }}.ipa Payload

      - name: Upload iOS Build
        uses: actions/upload-artifact@v4
        with:
          name: ios-build
          path: build/ios/iphoneos/SysAdmin-v${{ env.VERSION }}.ipa

  release:
    name: Create Release
    needs: [build-android, build-ios]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Get latest release version
        id: get_version
        run: |
          # Fetch all tags to make sure we have the complete history
          git fetch --tags --force
          # Get the latest tag across all branches
          LATEST_TAG=$(git tag -l | grep "^v[0-9]" | sort -V | tail -n 1 || echo "v1.0.0")
          echo "Latest tag found: $LATEST_TAG"
          # Extract the version number (remove 'v' prefix)
          LATEST_VERSION=${LATEST_TAG#v}
          # Parse the version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
          # Increment the patch version
          NEW_PATCH=$((PATCH + 1))
          # Set the new version
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          # For version code, use a number that keeps incrementing
          VERSION_CODE=$((PATCH + 1 + 13))
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV
          echo "TAG=v$NEW_VERSION" >> $GITHUB_ENV
          echo "New version will be: v$NEW_VERSION with code $VERSION_CODE"

      - name: Download Android Builds
        uses: actions/download-artifact@v4
        with:
          name: android-builds
          path: artifacts

      - name: Download iOS Build
        uses: actions/download-artifact@v4
        with:
          name: ios-build
          path: artifacts

      - name: List downloaded artifacts
        run: |
          echo "Contents of artifacts directory:"
          ls -la artifacts/
          echo "Preparing to release version: ${{ env.VERSION }} with code ${{ env.VERSION_CODE }}"

      - name: Push to Releases
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            artifacts/SysAdmin-v${{ env.VERSION }}-armeabi-v7a.apk
            artifacts/SysAdmin-v${{ env.VERSION }}-arm64-v8a.apk
            artifacts/SysAdmin-v${{ env.VERSION }}-x86_64.apk
            artifacts/SysAdmin-v${{ env.VERSION }}.ipa
          token: ${{ secrets.TOKEN }}
          tag: ${{ env.TAG }}
          name: SysAdmin ${{ env.TAG }}
          body: ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false